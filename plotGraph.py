'''   Script that reads contents of serial_data.txt generated by readSerialToFile script,
   removes all the lines that have "DHT" in them (service messages from DHT)
   and plots humidity and temperature on a graph and saves it as a PNG file
   Requres folowing packages: pandas, matplotlib, numpy
   Run command below to install them all
   pip install pandas matplotlib numpy
           by Gleb B. for Fab Lab Suomi Bootcamp
'''

# Import necessary libraries
import pandas as pd               # For data manipulation and analysis
import matplotlib.pyplot as plt    # For plotting graphs
from datetime import datetime      # For handling datetime operations

# Function to read and clean the data from the file

def read_data_from_file(filename):
    '''Reads data file into an pandas DataFrame'''
    try:
        # Read the data file into a pandas DataFrame
        # The file is expected to have space-separated values
        # The columns are Date, Time, Temperature, and Humidity
        data = pd.read_csv(filename, sep='\s+', header=None, names=['Date', 'Time', 'Temperature', 'Humidity'])

        # Combine the 'Date' and 'Time' columns into a single 'Timestamp' column
        # Convert the combined string into a datetime object
        data['Timestamp'] = pd.to_datetime(data['Date'] + ' ' + data['Time'], format='%Y-%m-%d %H:%M:%S')

        # Convert 'Temperature' and 'Humidity' columns to numeric values
        # Use 'coerce' to convert any invalid entries to NaN (missing values)
        data['Temperature'] = pd.to_numeric(data['Temperature'], errors='coerce')
        data['Humidity'] = pd.to_numeric(data['Humidity'], errors='coerce')

        # Remove any rows where 'Temperature' or 'Humidity' contains NaN values
        data = data.dropna(subset=['Temperature', 'Humidity'])

        # Return the cleaned DataFrame
        return data
    except Exception as e:
        # Print an error message if something goes wrong while reading the file
        print(f"Error reading the file: {e}")
        return None

# Function to clean the file by removing lines that contain 'DHT20'
def clean_file(filename):
    '''Removes all lines with "DHT" in it'''
    try:
        # Open the file for reading
        with open(filename, 'r') as infile:
            # Read all lines in the file
            lines = infile.readlines()

        # Filter out any lines that contain the string 'DHT20'
        cleaned_lines = [line for line in lines if 'DHT20' not in line]

        # Overwrite the original file with the cleaned lines (without 'DHT20')
        with open(filename, 'w') as outfile:
            outfile.writelines(cleaned_lines)

        # Inform the user that the file has been cleaned
        print(f"File '{filename}' has been cleaned successfully. Removed lines containing 'DHT20'.")
    
    except Exception as e:
        # Print an error message if something goes wrong while cleaning the file
        print(f"Error processing the file: {e}")

# Function to plot the data and save as a PNG file
def plot_data(data):
    '''Makes a graph and saves it as .png'''
    # Create a new figure for the plot with size 10x6 inches
    plt.figure(figsize=(10, 6))

    # Plot Temperature (°C) over time (using red color)
    plt.plot(data['Timestamp'], data['Temperature'], label='Temperature (°C)', color='r')

    # Plot Humidity (%) over time (using blue color)
    plt.plot(data['Timestamp'], data['Humidity'], label='Humidity (%)', color='b')

    # Add labels for x-axis (Time) and y-axis (Values)
    plt.xlabel('Time')
    plt.ylabel('Values')

    # Add a title to the plot
    plt.title('Temperature and Humidity Over Time')

    # Rotate the x-axis labels for better readability
    plt.xticks(rotation=45, ha='right')

    # Add a legend to distinguish Temperature and Humidity lines
    plt.legend()

    # Adjust the layout to prevent overlapping labels or axes
    plt.tight_layout()

    # Save the plot as a PNG image
    plt.savefig('temperature_humidity_plot.png')

    # Inform the user that the plot has been saved
    print("Plot saved as 'temperature_humidity_plot.png'")

# Main function to orchestrate the file cleaning and plotting
def main():
    '''body of the script'''
    # Filename for the file to clean
    filename = 'serial_data.txt'

    # Clean the file by removing any lines containing 'DHT20'
    clean_file(filename)

    # Read the cleaned data from the same file
    data = read_data_from_file(filename)

    # Check if the data is not empty and valid
    if data is not None and not data.empty:
        # Plot the data and save the graph as a PNG image
        plot_data(data)
    else:
        # If there's no valid data, print a message
        print("No valid data to plot.")

# Check if this script is run directly (and not imported as a module)
if __name__ == "__main__":
    main()
